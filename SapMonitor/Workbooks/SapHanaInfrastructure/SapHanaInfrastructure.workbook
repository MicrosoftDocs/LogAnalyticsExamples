{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "386c5637-375e-437c-acdb-542be563ed5a",
            "version": "KqlParameterItem/1.0",
            "name": "testDataExist",
            "type": 1,
            "query": "SapHana_LoadHistory_CL\r\n| project HOST_s\r\n| take 1",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 43200000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "5bca0011-344c-42a3-b69d-af95eb75fea2",
            "version": "KqlParameterItem/1.0",
            "name": "testProviderExists",
            "type": 1,
            "query": "SapHana_LoadHistory_CL \r\n| extend providerExists = case( columnifexists(\"PROVIDER_INSTANCE_s\", false)==false, false, true)\r\n| limit 1\r\n| where providerExists\r\n| project providerExists",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "dummy",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "testExist_Parameters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "696da4a1-0e13-40a2-9463-202f0ea90375",
            "version": "KqlParameterItem/1.0",
            "name": "Provider",
            "label": "Provider instance",
            "type": 2,
            "description": "Please select the instance of the monitoring provider",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "SapHana_LoadHistory_CL\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\n| distinct p",
            "crossComponentResources": [],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "testProviderExists",
        "comparison": "isNotEqualTo"
      },
      "name": "Provider_Parameters"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Utilization",
            "subTarget": "1",
            "postText": "",
            "style": "secondary"
          },
          {
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Anomalies",
            "subTarget": "2",
            "style": "secondary"
          },
          {
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Host Config",
            "subTarget": "3",
            "style": "secondary"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "testDataExist",
        "comparison": "isNotEqualTo"
      },
      "name": "Tabs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "8e3577a4-1f9f-4935-a2b2-c42a6911ae8a",
            "version": "KqlParameterItem/1.0",
            "name": "Host",
            "label": "HANA host",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "\"",
            "delimiter": ",",
            "query": "SapHana_LoadHistory_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| distinct HOST_s",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "8a72f4ec-ce64-49b7-88dc-d9b27de74f7a",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                }
              ]
            },
            "label": "Time range",
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "fae26122-3768-43dd-ac98-9b9768924799",
            "version": "KqlParameterItem/1.0",
            "name": "Granularity",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"1m\", \"label\":\"1 Minute\", \"selected\":false},\r\n{ \"value\":\"5m\", \"label\":\"5 Minutes\", \"selected\":false},\r\n{ \"value\":\"15m\", \"label\":\"15 Minutes\", \"selected\":true},\r\n{ \"value\":\"30m\", \"label\":\"30 Minutes\", \"selected\":false},\r\n{ \"value\":\"1h\", \"label\":\"1 Hour\", \"selected\":false}\r\n]\r\n",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "97bd0cb4-8720-4e4c-87ff-f8156a475d44",
            "version": "KqlParameterItem/1.0",
            "name": "ShowForecast",
            "label": "Show forecast metrics",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":0, \"label\":\"No\", \"selected\":true},\r\n    { \"value\":1, \"label\":\"Yes\", \"selected\":false}\r\n]\r\n",
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "Utilization_Parameters"
    },
    {
      "type": 1,
      "content": {
        "json": "âš  Metrics ingestion is still in progress; please note that it may take up to 30 minutes for data to appear.\r\n"
      },
      "conditionalVisibility": {
        "parameterName": "testDataExist",
        "comparison": "isEqualTo",
        "value": ""
      },
      "name": "Error_NoData"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST:string, ACTIVE:string,HOST_STATUS_s:string,INDEXSERVERROLE:string,NAMESERVERROLE:string)\r\n[\r\n\"N\\\\A\", \"YES\",\"OK\",\"MASTER\",\"MASTER\"\r\n];\r\nSapHana_HostConfig_CL\r\n| where TimeGenerated > ago(30d)\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| summarize arg_max(TimeGenerated, *) by HOST_s \r\n| project HOST=HOST_s , ACTIVE=HOST_ACTIVE_s , HOST_STATUS_s , INDEXSERVERROLE=INDEXSERVER_ACTUAL_ROLE_s , NAMESERVERROLE=NAMESERVER_ACTUAL_ROLE_s\r\n| union   isfuzzy=true nodata  | where HOST <> \"N\\\\A\" ",
        "size": 0,
        "title": "HANA Host Status",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "tiles",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Host",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "CPU",
              "formatter": 18,
              "formatOptions": {
                "min": 0,
                "max": 100,
                "palette": "redDark",
                "showIcon": true,
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "<",
                    "thresholdValue": "70",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">=",
                    "text": "{0}{1}"
                  },
                  {
                    "thresholdValue": "70",
                    "representation": "warning",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">=",
                    "text": "{0}{1}"
                  },
                  {
                    "thresholdValue": "85",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "MEM",
              "formatter": 18,
              "formatOptions": {
                "showIcon": true,
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "<=",
                    "thresholdValue": "70",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "70",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "85",
                    "representation": "critical",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Disk_Used",
              "formatter": 18,
              "formatOptions": {
                "min": 0,
                "max": 100,
                "palette": "red",
                "showIcon": true,
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "<=",
                    "thresholdValue": "70",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "70",
                    "representation": "2",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": ">",
                    "thresholdValue": "80",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "NW_IN",
              "formatter": 4,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              }
            },
            {
              "columnMatch": "NW_OUT",
              "formatter": 4,
              "formatOptions": {
                "showIcon": true
              }
            }
          ]
        },
        "tileSettings": {
          "titleContent": {
            "columnMatch": "HOST",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "HOST_STATUS_s",
            "formatter": 18,
            "formatOptions": {
              "palette": "auto",
              "showIcon": true,
              "thresholdsOptions": "icons",
              "thresholdsGrid": [
                {
                  "operator": "==",
                  "thresholdValue": "OK",
                  "representation": "success",
                  "text": "{0}{1}"
                },
                {
                  "operator": "==",
                  "thresholdValue": "WARNING",
                  "representation": "2",
                  "text": "{0}{1}"
                },
                {
                  "operator": "Default",
                  "thresholdValue": null,
                  "representation": "3",
                  "text": "{0}{1}"
                }
              ]
            }
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "HOST",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Status",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "3"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "3"
      },
      "customWidth": "33",
      "name": "HostConfig_HostStatus"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST:string, ACTIVE:string,HOST_STATUS_s:string,INDEXSERVERROLE:string,NAMESERVERROLE:string)\r\n[\r\n\"N\\\\A\", \"YES\",\"OK\",\"MASTER\",\"MASTER\"\r\n];\r\nSapHana_HostConfig_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where TimeGenerated > ago(30d)\r\n| summarize arg_max(TimeGenerated, *) by HOST_s \r\n| project HOST=HOST_s , ACTIVE=HOST_ACTIVE_s , HOST_STATUS_s , INDEXSERVERROLE=INDEXSERVER_ACTUAL_ROLE_s , NAMESERVERROLE=NAMESERVER_ACTUAL_ROLE_s\r\n| union   isfuzzy=true nodata  | where HOST <> \"N\\\\A\" ",
        "size": 0,
        "title": "HANA IndexServer Role",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "tiles",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Host",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ]
        },
        "tileSettings": {
          "titleContent": {
            "columnMatch": "HOST",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "INDEXSERVERROLE",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "showBorder": true
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "HOST",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Status",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "3"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "3"
      },
      "customWidth": "33",
      "name": "HostConfig_IndexserverRole"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST:string, ACTIVE:string,HOST_STATUS_s:string,INDEXSERVERROLE:string,NAMESERVERROLE:string)\r\n[\r\n\"N\\\\A\", \"YES\",\"OK\",\"MASTER\",\"MASTER\"\r\n];\r\nSapHana_HostConfig_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where TimeGenerated > ago(30d)\r\n| summarize arg_max(TimeGenerated, *) by HOST_s \r\n| project HOST=HOST_s , ACTIVE=HOST_ACTIVE_s , HOST_STATUS_s , INDEXSERVERROLE=INDEXSERVER_ACTUAL_ROLE_s , NAMESERVERROLE=NAMESERVER_ACTUAL_ROLE_s\r\n| union   isfuzzy=true nodata  | where HOST <> \"N\\\\A\" \r\n",
        "size": 0,
        "title": "HANA NameServer Role",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "tiles",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Host",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ]
        },
        "tileSettings": {
          "titleContent": {
            "columnMatch": "HOST",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "NAMESERVERROLE",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "showBorder": true
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "HOST",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Status",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "3"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "3"
      },
      "customWidth": "33",
      "name": "HostConfig_NameserverRole"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable([\"HANA Host\"]:string, [\"CPU used (%)\"]:real,[\"Memory used (%)\"]:real,[\"Disk used (GB)\"]:real,[\"Network in (MB/s)\"]:real,[\"Network out (MB/s)\"]:real)\r\n[\r\n\"N\\\\A\", 0,0,0,0,0\r\n];\r\nSapHana_LoadHistory_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n| summarize arg_max(TimeGenerated, *) by HOST_s\r\n| project [\"HANA Host\"]=HOST_s , [\"CPU used (%)\"]=CPU_d ,  [\"Memory used (%)\"]=round((MEMORY_USED_d/MEMORY_SIZE_d)*100,2),[\"Disk used (GB)\"]=DISK_USED_d  , [\"Network in (MB/s)\"]=NETWORK_IN_d , [\"Network out (MB/s)\"]=NETWORK_OUT_d \r\n| union   isfuzzy=true nodata  | where [\"HANA Host\"] <> \"N\\\\A\" ",
        "size": 4,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Host",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "CPU used (%)",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Memory used (%)",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Disk used (GB)",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Network in (MB/s)",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Network out (MB/s)",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "CPU",
              "formatter": 0,
              "formatOptions": {
                "min": 0,
                "max": 100,
                "palette": "redDark",
                "showIcon": true
              }
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "LoadHistory_UtilizationSummary"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string,avg_CPU_d:real)\r\n[\r\n\"N\\\\A\",0,\r\n];\r\nSapHana_LoadHistory_CL\r\n| where TimeGenerated  {TimeRange}\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n| summarize avg(CPU_d) by HOST_s , bin(TimeGenerated, {Granularity})\r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "aggregation": 3,
        "title": "CPU used (%)",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "timechart",
        "chartSettings": {
          "ySettings": {
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ShowForecast",
          "comparison": "isNotEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "ShowForecast",
        "comparison": "isNotEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_CPUActual",
      "styleSettings": {
        "maxWidth": "100"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, TimeGenerated:dynamic,avgCPU:dynamic,CPU_Forecast:dynamic)\r\n[\r\n\"N\\\\A\", \"[\\\"2019-09-01T00:00:00Z\\\",\\\"2019-09-02T00:00:00Z\\\"]\",\"[0,0,0,0]\",\"[0,0,0,0]\"\r\n];\r\nlet startDate = startofday(ago(7d)); // go back in time nn days\r\nlet endDate = now(); // what is the date now\r\nlet projectTo = now()+7d; // project forward nn days\r\nlet projectForward = 7; // must be same as projectTo value\r\nSapHana_LoadHistory_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n|where TimeGenerated {TimeRange} //> ago(7d)\r\n| make-series avgCPU=avg(CPU_d) default=0 on TimeGenerated in range({TimeRange:start},projectTo, {TimeRange:grain}) by HOST_s\r\n| extend CPU_Forecast = series_decompose_forecast(avgCPU, projectForward*24)\r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "aggregation": 3,
        "title": "CPU (%) - Actual vs. Forecast",
        "color": "blue",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "scatterchart",
        "chartSettings": {
          "ySettings": {
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ShowForecast",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "ShowForecast",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_CPUForecast",
      "styleSettings": {
        "maxWidth": "100"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string,avgMEM:real)\r\n[\r\n\"N\\\\A\",0,\r\n];\r\nSapHana_LoadHistory_CL\r\n| where TimeGenerated  {TimeRange}\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n| summarize avgMEM=avg(MEMORY_USED_d/MEMORY_SIZE_d)*100 by HOST_s, bin(TimeGenerated, {Granularity})\r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "title": "Memory used (%)",
        "color": "orange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "timechart",
        "chartSettings": {
          "ySettings": {
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ShowForecast",
          "comparison": "isNotEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "ShowForecast",
        "comparison": "isNotEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_MemoryPercentageActual",
      "styleSettings": {
        "maxWidth": "100"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, TimeGenerated:dynamic,avgMEM:dynamic,MEM_Forecast:dynamic)\r\n[\r\n\"N\\\\A\", \"[\\\"2019-09-01T00:00:00Z\\\",\\\"2019-09-02T00:00:00Z\\\"]\",\"[0,0,0,0]\",\"[0,0,0,0]\"\r\n];\r\nlet startDate = startofday(ago(7d)); // go back in time nn days\r\nlet endDate = now(); // what is the date now\r\nlet projectTo = now()+7d; // project forward nn days\r\nlet projectForward = 7; // must be same as projectTo value\r\nSapHana_LoadHistory_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n|where TimeGenerated {TimeRange}\r\n| make-series avgMEM=avg(MEMORY_USED_d/MEMORY_SIZE_d)*100 default=0 on TimeGenerated in range({TimeRange:start},projectTo, {TimeRange:grain}) by HOST_s\r\n| extend MEM_Forecast = series_decompose_forecast(avgMEM, projectForward*24)\r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "title": "Memory (%) - Actual vs. Forecast",
        "color": "orange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "scatterchart",
        "chartSettings": {
          "ySettings": {
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ShowForecast",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "ShowForecast",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_MemoryPercentageForecast",
      "styleSettings": {
        "maxWidth": "100"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, [\"Allocation limit\"]:real, [\"Resident memory\"]:real, [\"Memory size\"]:real, [\"Total resident memory\"]:real, [\"Memory used\"]:real)\r\n[\r\n\"N\\\\A\",0,0,0,0,0\r\n];SapHana_LoadHistory_CL\r\n| where TimeGenerated  {TimeRange}\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n| summarize [\"Allocation limit\"]=avg(MEMORY_ALLOCATION_LIMIT_d/1024)  , [\"Resident memory\"]=avg(MEMORY_RESIDENT_d/1024)  , [\"Memory size\"]=avg(MEMORY_SIZE_d/1024)  , [\"Total resident memory\"]=avg(MEMORY_TOTAL_RESIDENT_d/1024)  , [\"Memory used\"]=avg(MEMORY_USED_d/1024) by HOST_s, bin(TimeGenerated, {Granularity})\r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "aggregation": 3,
        "title": "Memory used (GB)",
        "color": "turquoise",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "timechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "HOST_s",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "AllocationLimitGB",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_MemoryGB"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, [\"Network in\"]:real, [\"Network out\"]:real)\r\n[\r\n\"N\\\\A\",0,0\r\n];\r\nSapHana_LoadHistory_CL\r\n| where TimeGenerated  {TimeRange}\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n|where NETWORK_IN_d >= 0 and NETWORK_OUT_d >= 0\r\n| summarize [\"Network in\"]=avg(NETWORK_IN_d), [\"Network out\"]=avg(NETWORK_OUT_d) by HOST_s, bin(TimeGenerated, {Granularity}) \r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "aggregation": 3,
        "title": "Network In/Out (MB/s)",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "categoricalbar"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_Network"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, avgDisk:real)\r\n[\r\n\"N\\\\A\",0\r\n];\r\nSapHana_LoadHistory_CL| where TimeGenerated  {TimeRange}\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n| summarize avgDisk=avg(DISK_USED_d) by HOST_s , bin(TimeGenerated, {Granularity})\r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "title": "Disk used (GB)",
        "color": "turquoise",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "timechart",
        "chartSettings": {
          "ySettings": {
            "min": 0
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ShowForecast",
          "comparison": "isNotEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "ShowForecast",
        "comparison": "isNotEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_DiskActual"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, TimeGenerated:dynamic,avgDiskUsed:dynamic,DiskUsed_Forecast:dynamic)\r\n[\r\n\"N\\\\A\", \"[\\\"2019-09-01T00:00:00Z\\\",\\\"2019-09-02T00:00:00Z\\\"]\",\"[0,0,0,0]\",\"[0,0,0,0]\"\r\n];\r\nlet startDate = startofday(ago(7d)); // go back in time nn days\r\nlet endDate = now(); // what is the date now\r\nlet projectTo = now()+7d; // project forward nn days\r\nlet projectForward = 7; // must be same as projectTo value\r\nSapHana_LoadHistory_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where HOST_s in  ({Host}) or '*' in ({Host})\r\n|where TimeGenerated {TimeRange}//> ago(7d)\r\n| make-series avgDiskUsed=avg(DISK_USED_d) default=0 on TimeGenerated in range({TimeRange:start},projectTo, {TimeRange:grain}) by HOST_s\r\n| extend DiskUsed_Forecast = series_decompose_forecast(avgDiskUsed, projectForward*24)\r\n| union   isfuzzy=true nodata |where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "title": "Disk (GB) - Actual vs. Forecast",
        "color": "turquoise",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "scatterchart",
        "chartSettings": {
          "ySettings": {
            "min": 0
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ShowForecast",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "1"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "ShowForecast",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "customWidth": "50",
      "name": "LoadHistory_DiskForecast"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "4ae6453c-91b4-4ab6-a3c8-2e110279df09",
            "version": "KqlParameterItem/1.0",
            "name": "AnomalyDetectionRange",
            "label": "Detection time period",
            "type": 4,
            "value": {
              "durationMs": 259200000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "2"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "2"
      },
      "name": "Anomaly_Parameters"
    },
    {
      "type": 1,
      "content": {
        "json": "Anomaly detection uses built in  machine learning capabilities to find  the **baseline** , **daily patterns** in CPU / Memory usage and  extracts **anomalous** points.  Minimum 2 days of data should be collected by SAP Monitor for cheking the daily patterns."
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "2"
      },
      "name": "Anomaly_IntroLabel"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, TimeGenerated:dynamic,avgCPU:dynamic,anomalies:dynamic)\r\n[\r\n\"N\\\\A\", \"[\\\"2019-09-01T00:00:00Z\\\",\\\"2019-09-02T00:00:00Z\\\"]\",\"[0,0,0,0]\",\"[0,0,0,0]\"\r\n];\r\nlet bucketsize=case(datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 29 , 4h,datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 6 , 1h ,30m);\r\nlet seasonalitybins=case(datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 29 , 42,datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 6 , 24 ,48);// for daily seasonality pattern\r\nSapHana_LoadHistory_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where TimeGenerated {AnomalyDetectionRange}\r\n| make-series [\"Actual CPU (%)\"]=avg(CPU_d) default=0 on TimeGenerated in range({AnomalyDetectionRange:start},now(), bucketsize) by HOST_s\r\n| extend (flag, [\"Anomaly score\"], [\"Calculated baseline\"]) = series_decompose_anomalies([\"Actual CPU (%)\"],1.5,seasonalitybins)\r\n| project-away flag\r\n| union isfuzzy=true nodata | where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "aggregation": 3,
        "title": "CPU Anomalies",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "linechart",
        "chartSettings": {
          "ySettings": {
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "2"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "2"
      },
      "name": "Anomalies_CPU"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let nodata = datatable(HOST_s:string, TimeGenerated:dynamic,avgMEM:dynamic,anomalies:dynamic)\r\n[\r\n\"N\\\\A\", \"[\\\"2019-09-01T00:00:00Z\\\",\\\"2019-09-02T00:00:00Z\\\"]\",\"[0,0,0,0]\",\"[0,0,0,0]\"\r\n];\r\nlet bucketsize=case(datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 29 , 4h,datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 6 , 1h ,30m);\r\nlet seasonalitybins=case(datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 29 , 42,datetime_diff('day',{AnomalyDetectionRange:end},{AnomalyDetectionRange:start}) > 6 , 24 ,48);// for daily seasonality pattern\r\nSapHana_LoadHistory_CL\r\n| extend p = columnifexists(\"PROVIDER_INSTANCE_s\", \"*\")\r\n| where p == \"*\" or p in ({Provider}) or \"*\" in ({Provider})\r\n| where TimeGenerated {AnomalyDetectionRange}\r\n| make-series [\"Actual memory (GB)\"]=avg(MEMORY_USED_d/MEMORY_SIZE_d)*100 default=0 on TimeGenerated in range({AnomalyDetectionRange:start},now(), bucketsize) by HOST_s\r\n| extend (flag, [\"Anomaly score\"], [\"Calculated baseline\"]) = series_decompose_anomalies([\"Actual memory (GB)\"],1.5,seasonalitybins)\r\n| project-away  flag\r\n| union   isfuzzy=true nodata | where HOST_s <> \"N\\\\A\"",
        "size": 0,
        "aggregation": 3,
        "title": "Memory Anomalies",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "linechart",
        "chartSettings": {
          "ySettings": {
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "2"
        },
        {
          "parameterName": "testDataExist",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "2"
      },
      "name": "Anomalies_Memory"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
