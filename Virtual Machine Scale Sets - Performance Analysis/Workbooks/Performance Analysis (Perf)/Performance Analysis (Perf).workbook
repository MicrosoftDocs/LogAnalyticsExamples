{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "value::selected"
        ],
        "parameters": [
          {
            "id": "688dc7cb-bea3-41ae-ae94-32d22e09568c",
            "version": "KqlParameterItem/1.0",
            "name": "Resource",
            "type": 5,
            "isRequired": true,
            "value": "value::1",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.compute/virtualmachinescalesets": true
              },
              "additionalResourceOptions": [
                "value::1"
              ]
            },
            "timeContextFromParameter": null
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "conditionalVisibility": {
        "parameterName": "_",
        "comparison": "isEqualTo",
        "value": "_"
      },
      "name": "parameters - 0"
    },
    {
      "type": 1,
      "content": {
        "json": "# Performance Analysis"
      },
      "conditionalVisibility": {
        "parameterName": "ContextFree",
        "comparison": "isEqualTo",
        "value": "value::1"
      },
      "name": "text - 1"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "5f8cce4b-9c4c-47da-8683-7e5ccc9faed3",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": false,
            "value": {
              "durationMs": 1800000
            },
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 900000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 1800000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 3600000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 14400000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 43200000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 86400000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 172800000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 259200000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 604800000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 1209600000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 2592000000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 5184000000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 7776000000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "d6de19ff-cde4-41c2-9fba-b441312ea5c9",
            "version": "KqlParameterItem/1.0",
            "name": "Test",
            "type": 1,
            "isRequired": false,
            "query": "Perf\r\n| take 1\r\n| summarize count()",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets"
      },
      "conditionalVisibility": null,
      "name": "parameters - 2"
    },
    {
      "type": 1,
      "content": {
        "json": "⚠ This workbook requires [Azure Monitor for VMs (preview)](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/vminsights-overview) enabled in order to show accurate and complete information for your VMs. Follow the link to onboard machines or select a different workspace."
      },
      "conditionalVisibility": {
        "parameterName": "Test",
        "comparison": "isEqualTo",
        "value": null
      },
      "name": "text - 3"
    },
    {
      "type": 1,
      "content": {
        "json": "---"
      },
      "conditionalVisibility": null,
      "name": "text - 4"
    },
    {
      "type": 1,
      "content": {
        "json": "<h2 style=\"margin-bottom:0;padding-bottom:0;\">Top 100 Machines</h2>"
      },
      "conditionalVisibility": null,
      "name": "text - 5"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "aa2368fc-ad30-4608-b96a-72abf7b1e1af",
            "version": "KqlParameterItem/1.0",
            "name": "Counter",
            "type": 2,
            "description": "Select a VM performance counter for the table below",
            "isRequired": false,
            "query": "// {Resource} {Test}\r\nPerf\r\n| where TimeGenerated {TimeRange}\r\n| where ObjectName != 'Network' and ObjectName != 'Network Interface'\r\n| summarize by CounterName, ObjectName, CounterText = CounterName\r\n| order by ObjectName asc, CounterText asc\r\n| project Counter = pack('counter', CounterName, 'object', ObjectName), CounterText, group = ObjectName",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "974d5ac2-4fc5-48e7-a8f7-16fc9dddc4ac",
            "version": "KqlParameterItem/1.0",
            "name": "CounterText",
            "type": 1,
            "isRequired": false,
            "query": "let metric = dynamic({Counter});\r\nrange Steps from 1 to 1 step 1\r\n| project strcat(metric.object, \" > \", metric.counter)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "ce228deb-88eb-4438-9dce-6c6d1972ff09",
            "version": "KqlParameterItem/1.0",
            "name": "IsNetworkCounter",
            "type": 1,
            "isRequired": false,
            "query": "let counter = dynamic({Counter});\r\nprint tostring(counter.object == 'Network Adapter')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "3b23aa7a-2afd-40ba-a710-0e2cc73c764b",
            "version": "KqlParameterItem/1.0",
            "name": "NetworkDirection",
            "type": 1,
            "isRequired": false,
            "query": "let metric = dynamic({Counter});\r\nprint(iff(metric.counter == 'Bytes Received/sec', 'Received', 'Sent'))",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "9ad8858d-8ef3-4144-94b1-66a8bf9fa9c9",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregators",
            "type": 2,
            "description": "Select one or more different aggregates to display in the table below",
            "isRequired": true,
            "multiSelect": true,
            "quote": "",
            "delimiter": ",",
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average\", \"label\":\"Average\", \"selected\": true },\r\n    { \"value\":\"P5th\", \"label\":\"P5th\", \"selected\": false },\r\n    { \"value\":\"P10th\", \"label\":\"P10th\", \"selected\": false },\r\n    { \"value\":\"P50th\", \"label\":\"P50th\", \"selected\": false },\r\n    { \"value\":\"P80th\", \"label\":\"P80th\", \"selected\": false },\r\n    { \"value\":\"P90th\", \"label\":\"P90th\", \"selected\": false },\r\n    { \"value\":\"P95th\", \"label\":\"P95th\", \"selected\": true },\r\n    { \"value\":\"Min\", \"label\":\"Min\", \"selected\": false },\r\n    { \"value\":\"Max\", \"label\":\"Max\", \"selected\": true }\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "6a7306ea-247f-46ca-abca-501911f9e9d3",
            "version": "KqlParameterItem/1.0",
            "name": "TableTrend",
            "type": 2,
            "description": "Select a percentile to display in the Trend column in the table below",
            "isRequired": true,
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\", \"selected\": true },\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\", \"selected\": false },\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\", \"selected\": false },\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\", \"selected\": false },\r\n    { \"value\":\"P80th = round(percentile(CounterValue, 80), 2)\", \"label\":\"P80th\", \"selected\": false },\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\", \"selected\": false },\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\", \"selected\": false }\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "0327f26e-cdde-4b48-b512-6c35f06ad1d0",
            "version": "KqlParameterItem/1.0",
            "name": "tableTrendOrder",
            "type": 1,
            "isRequired": false,
            "query": "range Steps from 1 to 1 step 1\r\n| project value = iff('{TableTrend}' contains 'P5th'  or '{TableTrend}' contains 'P10th', 'asc', 'desc')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "c2f05b6d-970d-4fde-88b0-868387c02250",
            "version": "KqlParameterItem/1.0",
            "name": "mergedAggregators",
            "type": 1,
            "isRequired": false,
            "query": "let aggregators = iff('{Aggregators}' contains '{TableTrend:label}', '{Aggregators}', '{Aggregators},{TableTrend:label}');\r\nrange Steps from 1 to 1 step 1\r\n| project aggregators",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "69c79551-68b9-4c84-bf57-202540482a02",
            "version": "KqlParameterItem/1.0",
            "name": "ShowTable",
            "type": 1,
            "isRequired": false,
            "query": "print iff(\"{Test:value}\" == \"\", \"False\", iff(\"{IsNetworkCounter:value}\" == \"False\", \"True\", \"False\"))",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "6b664a24-d9a3-47b0-9d94-9cada9ddb8ce",
            "version": "KqlParameterItem/1.0",
            "name": "ShowNetworkTable",
            "type": 1,
            "isRequired": false,
            "query": "print iff(\"{Test:value}\" == \"\", \"False\", \"{IsNetworkCounter:value}\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "343c4eae-e482-4678-a936-c4ad43b2ec19",
            "version": "KqlParameterItem/1.0",
            "name": "CounterTest",
            "type": 1,
            "isRequired": false,
            "query": "Perf\r\n| take 1",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets"
      },
      "conditionalVisibility": {
        "parameterName": "Test",
        "comparison": "isNotEqualTo",
        "value": null
      },
      "name": "parameters - 6"
    },
    {
      "type": 1,
      "content": {
        "json": "There are no performance counters, either onboard machines to this workspace or enable performance counters."
      },
      "conditionalVisibility": {
        "parameterName": "CounterTest",
        "comparison": "isEqualTo",
        "value": ""
      },
      "name": "text - 7"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// {Resource} {Test}\r\nlet metric = dynamic({Counter}); \r\nlet maxResultCount = 100; let summaryPerComputer = totable(Perf      | where TimeGenerated {TimeRange}       | where ObjectName == metric.object and CounterName == metric.counter     | summarize hint.shufflekey = Computer Average = avg(CounterValue), Max = max(CounterValue), Min = min(CounterValue), percentiles(CounterValue, 5, 10, 50, 80, 90, 95) by Computer      | project Computer, Average, Max, Min, P5th = percentile_CounterValue_5, P10th = percentile_CounterValue_10, P50th = percentile_CounterValue_50, P80th = percentile_CounterValue_80, P90th = percentile_CounterValue_90, P95th = percentile_CounterValue_95      | order by {TableTrend:label} {tableTrendOrder}, Computer      | limit maxResultCount);  let computerList = summaryPerComputer      | project Computer;  let MachineSummary = ServiceMapComputer_CL     | where TimeGenerated {TimeRange}     | where Computer in (computerList)     | summarize arg_max(TimeGenerated, *) by Computer     | project Computer, MachineSummary = pack('Fully Qualified Domain Name', Computer, 'OS Type', OperatingSystemFamily_s, 'Operating System', OperatingSystemFullName_s, 'Ipv4 Addresses', Ipv4Addresses_s,         'Ipv6 Addresses', Ipv6Addresses_s, 'Mac Addresses', MacAddresses_s, 'DNS Names', DnsNames_s, 'CPUs', strcat(Cpus_d, ' @ ', CpuSpeed_d, ' MHz'), 'Bitness', Bitness_s,         'Physcial Memory', strcat(PhysicalMemory_d, ' MB'), 'Virtualization State', VirtualizationState_s, 'VM Type', VirtualMachineType_s, 'OMS Agent', split(ResourceName_s, 'm-')[1]); let EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) []; let OmsNodeIdentityAndProps = computerList     | extend NodeId = Computer     | extend Priority = 1     | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer); let ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL     | where TimeGenerated {TimeRange}     | where Computer in (computerList)     | summarize arg_max(TimeGenerated, *) by Computer     | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2; let NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                                 | summarize arg_max(Priority, *) by Computer;  let NodeIdentityAndPropsMin = NodeIdentityAndProps     | extend Type = iff(NodeProps.type == 'StandAloneNode', iff(NodeProps.azureResourceId == '', 'Non-Azure Virtual Machine', 'Azure Virtual Machine'), NodeProps.type),      ResourceId = iff(NodeProps.type == 'AzureScaleSetNode', NodeProps.vmScaleSetResourceId,          iff(NodeProps.type == 'AzureCloudServiceNode', NodeProps.cloudServiceDeploymentId, Computer)),     ResourceName = iff(NodeProps.type == 'AzureScaleSetNode', strcat(NodeProps.vmScaleSetName, ' | ', NodeProps.scaleSetInstanceId),          iff(NodeProps.type == 'AzureCloudServiceNode', strcat(NodeProps.cloudServiceRoleName, ' | ', NodeProps.cloudServiceInstanceId), Computer))     | project Computer, Type, ResourceId, ResourceName; let trend = Perf          | where TimeGenerated {TimeRange}         | where Computer in (computerList)          | where ObjectName == metric.object and CounterName == metric.counter        | make-series {TableTrend} default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Computer     | project Computer, ['Trend ({TableTrend:label})'] = {TableTrend:label}; summaryPerComputer     | join kind=leftouter (trend) on Computer     | join kind=leftouter (NodeIdentityAndProps) on Computer     | join kind=leftouter (NodeIdentityAndPropsMin) on Computer     | join kind=leftouter (MachineSummary) on Computer     | project ResourceName, Type, {mergedAggregators}, ['Trend ({TableTrend:label})'], Properties = MachineSummary     | sort by {TableTrend:label} {tableTrendOrder} | limit maxResultCount",
        "size": 0,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Type",
              "formatter": 1,
              "formatOptions": {}
            },
            {
              "columnMatch": "Average",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P50th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Trend (Average)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Properties",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "CellDetails",
                "linkLabel": "ℹ️ Info"
              }
            },
            {
              "columnMatch": "P95th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P5th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P10th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P80th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P90th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Min",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Trend (P95th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P5th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P90th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P80th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P50th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P10th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "ShowTable",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "name": "query - 8"
    },
    {
      "type": 1,
      "content": {
        "json": "#### ℹ `Total Bytes {NetworkDirection}` counters are also being utilized to display the network table. The delta of `Total Bytes {NetworkDirection}` over a time period is being calculated to match up with the `Bytes {NetworkDirection}/sec` counter to display an accurate representation of network activity over all machines"
      },
      "conditionalVisibility": {
        "parameterName": "ShowNetworkTable",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "name": "text - 9"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// {Resource} {Test}\r\nlet timeRangeStart = {TimeRange:start};\r\nlet timeRangeEnd = {TimeRange:end};\r\nlet timeRangeGrain = {TimeRange:grain};    \r\nlet maxResultCount = 100; \r\nlet linuxMetric = iff('{NetworkDirection}' == 'Received', dynamic({'object': 'Network', 'counter': 'Total Bytes Received'}), dynamic({'object': 'Network', 'counter': 'Total Bytes Transmitted'}));\r\nlet windowsMetric = iff('{NetworkDirection}' == 'Received', dynamic({\"counter\":\"Bytes Received/sec\",\"object\":\"Network Adapter\"}), dynamic({\"counter\":\"Bytes Sent/sec\",\"object\":\"Network Adapter\"}));\r\nlet Network = materialize(Perf            \r\n| where TimeGenerated {TimeRange}   \r\n| where ObjectName == linuxMetric.object and CounterName == linuxMetric.counter            \r\n| extend ComputerId = iff(isempty(_ResourceId), Computer, _ResourceId)           \r\n| order by CounterName asc, InstanceName, ComputerId asc, TimeGenerated asc             \r\n| extend prev_ComputerId=prev(ComputerId), prev_Value=prev(CounterValue), prev_t=prev(TimeGenerated), prev_instance=prev(InstanceName)             \r\n| project   TimeGenerated, ComputerId, Computer, _ResourceId,                        cValue = iff(prev_ComputerId == ComputerId and prev_instance == InstanceName and CounterValue >= prev_Value and TimeGenerated > prev_t, (CounterValue-prev_Value)/((TimeGenerated-prev_t)/1s), real(0))            \r\n| summarize CounterValue = sum(cValue) by ComputerId, Computer, _ResourceId, bin(TimeGenerated, 2s)        \r\n| union (Perf            \r\n| where TimeGenerated {TimeRange}   \r\n| where ObjectName == windowsMetric.object and CounterName == windowsMetric.counter            \r\n| extend ComputerId = iff(isempty(_ResourceId), Computer, _ResourceId))            \r\n| summarize CounterValue = sum(CounterValue) by ComputerId, Computer, _ResourceId, bin(TimeGenerated, 2s));    \r\nlet summaryPerComputer = totable(Network            \r\n| summarize hint.shufflekey = ComputerId Average = avg(CounterValue), Max = max(CounterValue), percentiles(CounterValue, 50, 90, 95) by ComputerId, Computer, _ResourceId            \r\n| project ComputerId, Computer, Average, Max, P50th = percentile_CounterValue_50, P90th = percentile_CounterValue_90, P95th = percentile_CounterValue_95, ResourceId = _ResourceId            \r\n| order by {TableTrend:label} {tableTrendOrder}, Computer            \r\n| limit maxResultCount);    \r\nlet computerList = summaryPerComputer \r\n| project ComputerId, Computer;\r\nlet MachineSummary = ServiceMapComputer_CL     | where TimeGenerated {TimeRange} | extend ComputerId = iff(isempty(_ResourceId), Computer, _ResourceId)    | where ComputerId in (computerList)     | summarize arg_max(TimeGenerated, *) by Computer     | project Computer, MachineSummary = pack('Fully Qualified Domain Name', Computer, 'OS Type', OperatingSystemFamily_s, 'Operating System', OperatingSystemFullName_s, 'Ipv4 Addresses', Ipv4Addresses_s,         'Ipv6 Addresses', Ipv6Addresses_s, 'Mac Addresses', MacAddresses_s, 'DNS Names', DnsNames_s, 'CPUs', strcat(Cpus_d, ' @ ', CpuSpeed_d, ' MHz'), 'Bitness', Bitness_s,         'Physcial Memory', strcat(PhysicalMemory_d, ' MB'), 'Virtualization State', VirtualizationState_s, 'VM Type', VirtualMachineType_s, 'OMS Agent', split(ResourceName_s, 'm-')[1]); let EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) []; let OmsNodeIdentityAndProps = computerList     | extend NodeId = Computer     | extend Priority = 1     | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer); let ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL     | where TimeGenerated {TimeRange}     | where Computer in (computerList)     | summarize arg_max(TimeGenerated, *) by Computer     | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2; let NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                                 | summarize arg_max(Priority, *) by Computer;  let NodeIdentityAndPropsMin = NodeIdentityAndProps     | extend Type = iff(NodeProps.type == 'StandAloneNode', iff(NodeProps.azureResourceId == '', 'Non-Azure Virtual Machine', 'Azure Virtual Machine'), NodeProps.type),      ResourceId = iff(NodeProps.type == 'AzureScaleSetNode', NodeProps.vmScaleSetResourceId,          iff(NodeProps.type == 'AzureCloudServiceNode', NodeProps.cloudServiceDeploymentId, Computer)),     ResourceName = iff(NodeProps.type == 'AzureScaleSetNode', strcat(NodeProps.vmScaleSetName, ' | ', NodeProps.scaleSetInstanceId),          iff(NodeProps.type == 'AzureCloudServiceNode', strcat(NodeProps.cloudServiceRoleName, ' | ', NodeProps.cloudServiceInstanceId), Computer))     | project Computer, Type, ResourceId, ResourceName; \r\nlet trend = Network                \r\n| where ComputerId in (computerList)                \r\n| summarize hint.shufflekey = ComputerId {TableTrend} by ComputerId, Computer, bin(TimeGenerated, timeRangeGrain)    \r\n| project ComputerId, Computer, {TableTrend:label}                \r\n| summarize hint.shufflekey = ComputerId trendList = makelist({TableTrend:label}) by ComputerId, Computer;    \r\nsummaryPerComputer    \r\n| join (trend) on Computer    \r\n| join (NodeIdentityAndProps) on Computer  \r\n| join kind=leftouter (NodeIdentityAndPropsMin) on Computer \r\n| join kind=leftouter (MachineSummary) on Computer\r\n| project ResourceName, Type, {mergedAggregators}, ['Trend ({TableTrend:label})'] = trendList, Properties = MachineSummary\r\n| sort by {TableTrend:label} {tableTrendOrder} | limit maxResultCount",
        "size": 0,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Type",
              "formatter": 1,
              "formatOptions": {}
            },
            {
              "columnMatch": "P95th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Average",
              "formatter": 1,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P10th",
              "formatter": 1,
              "formatOptions": {},
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P50th",
              "formatter": 1,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Trend (P95th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Properties",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "CellDetails",
                "linkLabel": "️️️ℹ Info"
              }
            },
            {
              "columnMatch": "P5th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P80th",
              "formatter": 1,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P90th",
              "formatter": 1,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Min",
              "formatter": 1,
              "formatOptions": {},
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max",
              "formatter": 1,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Trend (P5th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P90th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P80th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P50th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P10th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (Average)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "ShowNetworkTable",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "name": "query - 10"
    },
    {
      "type": 1,
      "content": {
        "json": "---\r\n## Top 10 Machines"
      },
      "conditionalVisibility": null,
      "name": "text - 11"
    },
    {
      "type": 1,
      "content": {
        "json": "### CPU Utilization %"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "text - 12"
    },
    {
      "type": 1,
      "content": {
        "json": "### Available Memory"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "text - 13"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "92358ae0-d5e1-494b-b65b-6d904f1325c5",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(CounterValue, 95), 2)",
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(CounterValue, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\"}\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "27345375-4376-4e2f-8ac4-59d4eab9d235",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderLeft",
            "type": 1,
            "isRequired": false,
            "query": "range Steps from 1 to 1 step 1\r\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "4d9ba0ec-9d22-4fec-9f85-4be334f42d91",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftValue",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:value}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "50242f48-6c7d-449b-ad93-838c94e615a0",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftLabel",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:label}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "parameters - 14"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "333837c2-d5a4-4173-9aad-3db1dca17e2a",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(CounterValue, 95), 2)",
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(CounterValue, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\"}\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "a23b29a5-5e4a-4d8e-ba73-bfdf27b2980e",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderRight",
            "type": 1,
            "isRequired": false,
            "query": "range Steps from 1 to 1 step 1\r\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "cc8dfabc-9eb9-4227-97bb-f5e9319030ec",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightValue",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:value}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "ff7a79ff-742a-4c6e-8628-c52f45b3bf71",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightLabel",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:label}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "parameters - 15"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let cpuSummary=totable(Perf\r\n    | where TimeGenerated {TimeRange} \r\n    | where (ObjectName == 'Processor' and InstanceName == '_Total' and CounterName == '% Processor Time')\r\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer, CounterName\r\n    | top 10 by {aggregateLeftLabel} {aggregateOrderLeft});\r\nlet computerList=(cpuSummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nPerf\r\n    | where TimeGenerated {TimeRange}\r\n    | where (ObjectName == 'Processor' and InstanceName == '_Total' and CounterName == '% Processor Time')\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "aggregation": 3,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "query - 16"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let memorySummary=totable(Perf\r\n    | where TimeGenerated {TimeRange} \r\n    | where ObjectName == 'Memory' and CounterName in ('Available MBytes', 'Available MBytes Memory')\r\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, CounterName\r\n    | top 10 by {aggregateRightLabel} {aggregateOrderRight});\r\nlet computerList=(memorySummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nPerf\r\n    | where TimeGenerated {TimeRange}\r\n    | where ObjectName == 'Memory' and CounterName in ('Available MBytes', 'Available MBytes Memory')\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "aggregation": 3,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "query - 17"
    },
    {
      "type": 1,
      "content": {
        "json": "### Bytes Sent Rate"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "text - 18"
    },
    {
      "type": 1,
      "content": {
        "json": "### Bytes Received Rate"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "text - 19"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "360da4c1-97fa-4b15-a008-33a6110d0acd",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(CounterValue, 95), 2)",
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(CounterValue, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\"}\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "31ccd4a1-d626-44bb-a5de-1780a33b37a5",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderLeft",
            "type": 1,
            "isRequired": false,
            "query": "range Steps from 1 to 1 step 1\r\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "4765abab-a682-49f6-bb41-d64852aba192",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftValue",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:value}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "1d9b0ea9-09d4-4c73-8e59-fa7ab760b880",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftLabel",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:label}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "parameters - 20"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "6772b281-d17d-4293-a227-1b2ed67f399e",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(CounterValue, 95), 2)",
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(CounterValue, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\"}\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "5e2eef28-0528-406f-86b5-ceae535455f9",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderRight",
            "type": 1,
            "isRequired": false,
            "query": "range Steps from 1 to 1 step 1\r\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "586fa51c-1a45-4602-adcb-62eb0f619b7f",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightValue",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:value}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          },
          {
            "id": "912085b6-f920-4a37-9ce3-f1ef86bd5df8",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightLabel",
            "type": 1,
            "isRequired": true,
            "query": "print \"{Aggregate:label}\"",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "parameters - 21"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let linuxNetworkSend=Perf \r\n    | where TimeGenerated {TimeRange} \r\n    | where ObjectName == 'Network' and CounterName == 'Total Bytes Transmitted'\r\n    | order by CounterName asc, InstanceName, Computer asc, TimeGenerated asc\r\n    | extend prev_Computer=prev(Computer), prev_Value=prev(CounterValue), prev_t=prev(TimeGenerated), prev_counter=prev(CounterName), prev_instance=prev(InstanceName)\r\n    | project   TimeGenerated,            Computer,            CounterValue = iff(prev_Computer == Computer and prev_instance == InstanceName and prev_counter == CounterName and CounterValue >= prev_Value and TimeGenerated > prev_t, (CounterValue-prev_Value)/((TimeGenerated-prev_t)/1s), real(0))\r\n    | summarize hint.shufflekey=Computer CounterValue = sum(CounterValue) by Computer, bin(TimeGenerated, 2s);\r\nlet windowsNetworkSend = Perf \r\n    | where TimeGenerated {TimeRange} \r\n    | where ObjectName == 'Network Adapter' and CounterName == 'Bytes Sent/sec'\r\n    | summarize hint.shufflekey=Computer CounterValue = sum(CounterValue) by Computer, bin(TimeGenerated, 2s);\r\nlet networkDataSend = union linuxNetworkSend, windowsNetworkSend;\r\nlet networkSendSummary = totable(networkDataSend\r\n    | where TimeGenerated {TimeRange}\r\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer\r\n    | top 10 by {aggregateLeftLabel} {aggregateOrderLeft});\r\nlet computerList=(networkSendSummary | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nnetworkDataSend\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "query - 22"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let linuxNetworkReceive=Perf \r\n    | where TimeGenerated {TimeRange} \r\n    | where ObjectName == 'Network' and CounterName == 'Total Bytes Received'\r\n    | order by CounterName asc, InstanceName, Computer asc, TimeGenerated asc\r\n    | extend prev_Computer=prev(Computer), prev_Value=prev(CounterValue), prev_t=prev(TimeGenerated), prev_counter=prev(CounterName), prev_instance=prev(InstanceName)\r\n    | project   TimeGenerated,            Computer,            CounterValue = iff(prev_Computer == Computer and prev_instance == InstanceName and prev_counter == CounterName and CounterValue >= prev_Value and TimeGenerated > prev_t, (CounterValue-prev_Value)/((TimeGenerated-prev_t)/1s), real(0))\r\n    | summarize hint.shufflekey=Computer CounterValue = sum(CounterValue) by Computer, bin(TimeGenerated, 2s);\r\nlet windowsNetworkReceive = Perf \r\n    | where TimeGenerated {TimeRange} \r\n    | where ObjectName == 'Network Adapter' and CounterName == 'Bytes Received/sec'\r\n    | summarize hint.shufflekey=Computer CounterValue = sum(CounterValue) by Computer, bin(TimeGenerated, 2s);\r\nlet networkDataReceive = union linuxNetworkReceive, windowsNetworkReceive;\r\nlet networkReceiveSummary = totable(networkDataReceive\r\n    | where TimeGenerated {TimeRange}\r\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer\r\n    | top 10 by {aggregateRightLabel} {aggregateOrderRight});\r\nlet computerList=(networkReceiveSummary | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nnetworkDataReceive\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "query - 23"
    },
    {
      "type": 1,
      "content": {
        "json": "### Logical Disk Space Used %"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "text - 24"
    },
    {
      "type": 1,
      "content": {
        "json": ""
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "text - 25"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "5d6afbec-79f6-4cd1-b3a1-361503478304",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(CounterValue, 95), 2)",
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(CounterValue), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(CounterValue, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(CounterValue, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(CounterValue, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(CounterValue, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(CounterValue, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(CounterValue, 95), 2)\", \"label\":\"P95th\"}\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "1d5a805c-acce-4afe-a38b-c2740fb3ff26",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrder",
            "type": 1,
            "isRequired": false,
            "query": "range Steps from 1 to 1 step 1\r\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "queryType": 0,
            "resourceType": "microsoft.compute/virtualmachinescalesets"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets"
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "parameters - 26"
    },
    {
      "type": 1,
      "content": {
        "json": ""
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "text - 27"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let diskSummary=totable(Perf\r\n    | where TimeGenerated {TimeRange} \r\n    | where (ObjectName == 'LogicalDisk' and InstanceName != '_Total' and CounterName in ('% Free Space')) or        (ObjectName == 'Logical Disk' and InstanceName != '_Total' and CounterName in ('% Used Space'))\r\n    | project TimeGenerated, Computer,    CounterName = '% Used Space',    CounterValue = case(ObjectName == 'LogicalDisk' and CounterName == '% Free Space', 100 - CounterValue,                CounterValue < 0, real(0),                CounterValue)\r\n    | summarize hint.shufflekey=Computer {Aggregate} by Computer, CounterName\r\n    | top 10 by {Aggregate:label} {aggregateOrder});\r\nlet computerList=(diskSummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nPerf\r\n    | where TimeGenerated {TimeRange}\r\n    | where (ObjectName == 'LogicalDisk' and InstanceName != '_Total' and CounterName in ('% Free Space')) or        (ObjectName == 'Logical Disk' and InstanceName != '_Total' and CounterName in ('% Used Space'))\r\n    | where Computer in (computerList)\r\n    | project TimeGenerated, Computer,    CounterName = '% Used Space',    CounterValue = case(ObjectName == 'LogicalDisk' and CounterName == '% Free Space', 100 - CounterValue,                CounterValue < 0, real(0),                CounterValue)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {Aggregate} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "aggregation": 3,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "microsoft.compute/virtualmachinescalesets",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": null,
      "customWidth": "50",
      "name": "query - 28"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
